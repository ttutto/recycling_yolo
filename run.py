{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3625fc0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fusing layers... \n",
      "Model Summary: 213 layers, 7023610 parameters, 0 gradients, 15.8 GFLOPs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "BRUSH\n",
      "CAN\n",
      "BRUSH\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "BRUSH\n",
      "PET\n",
      "BRUSH\n",
      "CAN\n",
      "CAN\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "BRUSH\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "PET\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "BRUSH\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "STRAW\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "STRAW\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "STRAW\n",
      "CAN\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "CAN\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "BRUSH\n",
      "STRAW\n",
      "BRUSH\n",
      "STRAW\n",
      "BRUSH\n",
      "STRAW\n",
      "BRUSH\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "STRAW\n",
      "PET\n",
      "PET\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n",
      "CAN\n"
     ]
    },
    {
     "ename": "error",
     "evalue": "OpenCV(4.5.4-dev) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\imgproc\\src\\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31merror\u001b[0m                                     Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-f7c0a3e7d0d7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     29\u001b[0m                  cv2.FONT_HERSHEY_SIMPLEX , 0.75, color, 1, cv2.LINE_AA) \n\u001b[0;32m     30\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 31\u001b[1;33m                 \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"USB Camera\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mframe\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     32\u001b[0m                 \u001b[0mkeyCode\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwaitKey\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m30\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mkeyCode\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mord\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'q'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31merror\u001b[0m: OpenCV(4.5.4-dev) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\imgproc\\src\\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'\n"
     ]
    }
   ],
   "source": [
    "import cv2 \n",
    "import numpy as np \n",
    "from yolo import OBJ_DETECTION \n",
    "from firebase import firebase\n",
    "\n",
    "Object_classes = ['BRUSH', 'CAN', 'PET', 'STRAW', 'UN PET']\n",
    "Object_colors = list(np.random.rand(80,3)*255) \n",
    "Object_detector = OBJ_DETECTION('./runs/train/T3_yolov5s_results2/weights/best.pt', Object_classes) \n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "if cap.isOpened():\n",
    "        window_handle = cv2.namedWindow(\"USB Camera\", cv2.WINDOW_AUTOSIZE)\n",
    "        # Window \n",
    "        while cv2.getWindowProperty(\"USB Camera\", 0) >= 0:\n",
    "                ret, frame = cap.read()\n",
    "                if ret:\n",
    "                        # detection process \n",
    "                        objs = Object_detector.detect(frame) \n",
    "\n",
    "                        # plotting \n",
    "                        for obj in objs: \n",
    "                                # print(obj) \n",
    "                                label = obj['label'] \n",
    "                                score = obj['score'] \n",
    "                                print(label)\n",
    "                                [(xmin,ymin),(xmax,ymax)] = obj['bbox'] \n",
    "                                color = Object_colors[Object_classes.index(label)] \n",
    "                                frame = cv2.rectangle(frame, (xmin,ymin), (xmax,ymax), color, 2) \n",
    "                                frame = cv2.putText(frame, f'{label} ({str(score)})', (xmin,ymin),\n",
    "                 cv2.FONT_HERSHEY_SIMPLEX , 0.75, color, 1, cv2.LINE_AA) \n",
    "\n",
    "                cv2.imshow(\"USB Camera\", frame) \n",
    "                keyCode = cv2.waitKey(30) \n",
    "                if keyCode == ord('q'): \n",
    "                        break \n",
    "        cap.release() \n",
    "        cv2.destroyAllWindows() \n",
    "else: \n",
    "        print(\"Unable to open camera\") \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50a47d94",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
